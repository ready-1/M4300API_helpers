CRITICAL_RULES_VALIDATION_REQUIRED {
    LOCATION: .clinerules.critical
    REQUIRED: Validate before each tool use
    REQUIRED: Validate before each command
    REQUIRED: Validate before each sequence
}

OODA_LOOP_WORKFLOW {
    REQUIRED: Follow OODA loop for all operations
    REQUIRED: Document thinking in OODA structure
    FORBIDDEN: Skip any OODA phase
    
    OBSERVE {
        REQUIRED: Gather current implementation state
        REQUIRED: Review relevant documentation
        REQUIRED: Check live API behavior
        REQUIRED: Note any discrepancies
        FORBIDDEN: Make assumptions without validation
    }
    
    ORIENT {
        REQUIRED: Analyze gathered information
        REQUIRED: Consider project architecture
        REQUIRED: Identify dependencies
        REQUIRED: Assess potential impacts
        FORBIDDEN: Skip impact analysis
    }
    
    DECIDE {
        REQUIRED: Outline specific approach
        REQUIRED: Justify chosen approach
        REQUIRED: Consider alternatives
        REQUIRED: Break down into steps
        FORBIDDEN: Proceed without clear plan
    }
    
    ACT {
        REQUIRED: Execute one tool at a time
        REQUIRED: Wait for feedback after each action
        REQUIRED: Validate results
        REQUIRED: Document outcomes
        FORBIDDEN: Multiple simultaneous actions
    }
}

IMPLEMENTATION_WORKFLOW {
    VALIDATION_SCRIPTS {
        REQUIRED: Execute in correct order
        REQUIRED: validate_endpoint.sh first for API validation
        REQUIRED: validate_helper.sh as completion checkpoint
        REQUIRED: Save all validation outputs
        REQUIRED: Review and fix ALL warnings
        
        CHECKPOINT_VALIDATION {
            REQUIRED: Run before considering endpoint complete
            REQUIRED: Verify module structure
            REQUIRED: Check code requirements
            REQUIRED: Validate test coverage
            REQUIRED: Confirm documentation
            REQUIRED: Verify MCP integration
        }
    }

    REQUIRED: Follow helper module template
    REQUIRED: Base code on live API responses
    REQUIRED: Handle undocumented fields
    REQUIRED: Include example responses
    FORBIDDEN: Implement without validation

    MCP_INTEGRATION {
        REQUIRED: Follow sequential operation pattern
        REQUIRED: Document tool parameters
        REQUIRED: Handle all error cases
        REQUIRED: Verify operation results
        REQUIRED: Log all MCP interactions
    }
    
    STRUCTURE {
        REQUIRED: Use dataclass for response types
        REQUIRED: Include type hints
        REQUIRED: Add docstrings
        REQUIRED: Implement error handling
        REQUIRED: Follow naming conventions
    }
    
    TESTING {
        REQUIRED: Create unit tests
        REQUIRED: Create integration tests
        REQUIRED: Test error cases
        REQUIRED: Validate inputs
        REQUIRED: Mock responses match schema
    }
}

DEVELOPMENT_WORKFLOW {
    ENVIRONMENT {
        REQUIRED: Poetry virtual environment
        REQUIRED: Basic pre-commit hooks
        REQUIRED: VSCode integration
    }

    VERSION_CONTROL {
        REQUIRED: One branch per endpoint
        REQUIRED: Clear commit messages
        REQUIRED: Complete validation before merge
    }

    ERROR_HANDLING {
        REQUIRED: Basic error classes
        REQUIRED: Error context in logs
        REQUIRED: Recovery procedures
    }
}

RELEASE_CHECKLIST {
    VERIFICATION [
        1. All helpers implemented
        2. Tests passing
        3. Basic docs complete
        4. Security validated
        5. Example code working
    ]

    PACKAGING [
        1. Version tagged
        2. Dependencies locked
        3. README updated
        4. Changelog entry
    ]
}

AUTOMATION_REQUIREMENTS {
    REQUIRED: Run pre-commit validation
    REQUIRED: Check task transition format
    REQUIRED: Validate branch naming
    REQUIRED: Verify documentation updates
}

TASK_MANAGEMENT {
    REQUIRED: Follow task transition format
    REQUIRED: Update todo.md status
    REQUIRED: Document task dependencies
    REQUIRED: Track completion criteria
}

DEVELOPMENT_TOOLS {
    REQUIRED: Use MCP server for development
    REQUIRED: Run validation scripts
    REQUIRED: Follow helper templates
    REQUIRED: Document tool usage
}

DEFERRED_REQUIREMENTS {
    LOCATION: COMPLIANCE.md
    NOTE: "Infrastructure and advanced features for post-release"
    
    DEFERRED_FEATURES [
        - Performance monitoring
        - Extended documentation
        - Container support
        - CI/CD pipeline
        - OWASP compliance
        - Accessibility features
        - Load testing
    ]
}

ENDPOINT_DEVELOPMENT_WORKFLOW {
    REQUIRED: Follow OODA loop for each phase
    REQUIRED: Document all decisions
    FORBIDDEN: Skip validation steps
    
    INFORMATION_PHASE {
        OBSERVE {
            REQUIRED: Collect all information sources
            REQUIRED: Store in mcp_info/[METHOD]_[endpoint].txt
            REQUIRED: Use standard format
            
            SOURCES [
                1. Postman (working examples)
                2. PDF (official documentation)
                3. Swagger (API specification)
                4. Known issues (if any)
            ]
        }

        ORIENT {
            REQUIRED: Cross-reference all sources
            REQUIRED: Identify discrepancies
            REQUIRED: Note uncertainties
            
            CONFIDENCE_LEVELS [
                4: Live tested      // Verified on actual switch
                3: Postman verified // Working in Postman
                2: Documented       // In official docs
                1: Unverified      // Needs confirmation
            ]
        }

        DECIDE {
            REQUIRED: Determine true behavior
            REQUIRED: Document confidence scores
            REQUIRED: Note required tests
        }

        ACT {
            REQUIRED: Update MCP server
            REQUIRED: Store examples
            REQUIRED: Document findings
        }
    }

    IMPLEMENTATION_PHASE {
        OBSERVE {
            REQUIRED: Review MCP knowledge
            REQUIRED: Check similar endpoints
            REQUIRED: Note edge cases
        }

        ORIENT {
            REQUIRED: Plan implementation
            REQUIRED: Design tests
            REQUIRED: Consider error cases
        }

        DECIDE {
            REQUIRED: Choose implementation approach
            REQUIRED: Define type structure
            REQUIRED: Plan error handling
        }

        ACT {
            REQUIRED: Implement helper
            REQUIRED: Write tests
            REQUIRED: Add documentation
            REQUIRED: Generate examples
        }
    }

    VERIFICATION_PHASE {
        OBSERVE {
            REQUIRED: Run all tests
            REQUIRED: Test live switch
            REQUIRED: Check edge cases
        }

        ORIENT {
            REQUIRED: Analyze results
            REQUIRED: Compare to expected
            REQUIRED: Note any issues
        }

        DECIDE {
            REQUIRED: Determine if complete
            REQUIRED: Plan any fixes
            REQUIRED: Update confidence
        }

        ACT {
            REQUIRED: Make improvements
            REQUIRED: Update documentation
            REQUIRED: Commit changes
        }
    }

    QUALITY_REQUIREMENTS {
        DOCUMENTATION {
            REQUIRED: Standard format used
            REQUIRED: All sections complete
            REQUIRED: Examples included
            REQUIRED: Issues documented
            FORBIDDEN: Missing confidence scores
        }

        IMPLEMENTATION {
            REQUIRED: Type safety
            REQUIRED: Error handling
            REQUIRED: Edge cases covered
            REQUIRED: Clear interface
            FORBIDDEN: Untested code
        }

        VERIFICATION {
            REQUIRED: Unit tests pass
            REQUIRED: Integration tests pass
            REQUIRED: Live switch tested
            REQUIRED: Examples work
            FORBIDDEN: Known issues untracked
        }
    }

    COMPLETION_CRITERIA [
        1. All phases completed
        2. All tests passing
        3. Live switch verified
        4. Documentation complete
        5. MCP server updated
        6. Changes committed
    ]
}
